{"ast":null,"code":"import { POOL_DATA } from './../app.constants';\nimport { AuthenticationDetails, CognitoUser, CognitoUserPool } from 'amazon-cognito-identity-js';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const TOKEN = 'token';\nexport const AUTHENTICATED_USER = 'authenticaterUser';\nconst userPool = new CognitoUserPool(POOL_DATA);\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    executeAWSCognitoAuthenticationService(username, password) {\n      //https://docs.aws.amazon.com/cognito/latest/developerguide/authentication.html\n      const obs = Observable.create(observer => {\n        const authData = {\n          Username: username,\n          Password: password\n        };\n        const authDetails = new AuthenticationDetails(authData);\n        const userData = {\n          Username: username,\n          Pool: userPool\n        };\n        const cognitoUser = new CognitoUser(userData);\n        cognitoUser.authenticateUser(authDetails, {\n          onSuccess(result) {\n            sessionStorage.setItem(AUTHENTICATED_USER, userPool.getCurrentUser().getUsername());\n            sessionStorage.setItem(TOKEN, result.getIdToken().getJwtToken());\n            observer.next({\n              userName: userPool.getCurrentUser().getUsername(),\n              token: result.getIdToken().getJwtToken()\n            });\n            console.log(result);\n          },\n\n          onFailure(err) {\n            console.log(err);\n            alert(err);\n          }\n\n        });\n      });\n      return obs;\n    }\n\n    getCognitoAuthenticatedUser() {\n      return userPool.getCurrentUser();\n    }\n\n    getAuthenticatedUser() {\n      return sessionStorage.getItem(AUTHENTICATED_USER);\n    }\n\n    getAuthenticatedToken() {\n      if (this.getAuthenticatedUser()) {\n        return sessionStorage.getItem(TOKEN);\n      }\n    }\n\n    isUserLoggedIn() {\n      const user = sessionStorage.getItem(AUTHENTICATED_USER);\n      return !(user === null);\n    }\n\n    logout() {\n      console.log(sessionStorage.getItem(TOKEN));\n      sessionStorage.removeItem(AUTHENTICATED_USER);\n      sessionStorage.removeItem(TOKEN);\n      if (userPool && userPool.getCurrentUser()) userPool.getCurrentUser().signOut();\n    }\n\n    isTokenAvailableInURL() {\n      const hash = window.location.hash.substr(1);\n      if (!hash) return false;\n      console.log(hash);\n      const firstToken = hash.split('&')[0];\n      if (!firstToken) return false;\n      console.log(firstToken);\n      const firstValue = firstToken.split('=')[1];\n      if (!firstValue) return false;\n      return true;\n    }\n\n    loginWithTokenFromURL() {\n      const hash = window.location.hash.substr(1);\n      if (!hash) return;\n      console.log(hash);\n      const firstToken = hash.split('&')[0];\n      if (!firstToken) return;\n      console.log(firstToken);\n      const firstValue = firstToken.split('=')[1];\n      if (!firstValue) return;\n      console.log(firstValue);\n      const claims = this.parseJwt(firstValue);\n      console.log(claims);\n      console.log(claims.name);\n      sessionStorage.setItem(AUTHENTICATED_USER, claims.name);\n      sessionStorage.setItem(TOKEN, 'Bearer ' + firstValue);\n    }\n\n    parseJwt(token) {\n      var base64Url = token.split('.')[1];\n      var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();\nexport class AuthenticationBean {\n  constructor(message) {\n    this.message = message;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}