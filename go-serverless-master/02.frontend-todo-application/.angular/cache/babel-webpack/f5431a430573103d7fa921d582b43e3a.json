{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../authentication.service\";\nexport let HttpIntercepterBasicAuthService = /*#__PURE__*/(() => {\n  class HttpIntercepterBasicAuthService {\n    constructor(authenticationService) {\n      this.authenticationService = authenticationService;\n    }\n\n    intercept(request, next) {\n      const basicAuthHeaderString = this.authenticationService.getAuthenticatedToken();\n      const username = this.authenticationService.getAuthenticatedUser();\n      console.log('Token used : ' + basicAuthHeaderString);\n      console.log('~~~~~~~~~~~~~~~~~~');\n      console.log('IF REQUEST FAILED');\n      console.log('~~~~~~~~~~~~~~~~~~');\n      console.log('1. HAS TOKEN EXPIRED? RELOGIN AND REFRESH TOKEN');\n      console.log('2. IS THE API URL RIGHT? GRAB THE REQUEST DETAILS FROM NETWORK TAB AND RUN IT IN REST API CLIENT');\n      console.log('3. IS THE FORMAT OF THE TOKEN RIGHT?');\n      console.log('4. IS THE BACKEND/API GATEWAY CONFIGURATION RIGHT?');\n\n      if (basicAuthHeaderString && username) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: basicAuthHeaderString\n          }\n        });\n      }\n\n      return next.handle(request);\n    }\n\n  }\n\n  HttpIntercepterBasicAuthService.ɵfac = function HttpIntercepterBasicAuthService_Factory(t) {\n    return new (t || HttpIntercepterBasicAuthService)(i0.ɵɵinject(i1.AuthenticationService));\n  };\n\n  HttpIntercepterBasicAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpIntercepterBasicAuthService,\n    factory: HttpIntercepterBasicAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpIntercepterBasicAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}